#!/bin/sh

set -e    # halt on first error

link=all  # link all binaries by default
linked=no # track whether we linked

case $1 in
  -nolink) link=none ; shift ;;  # don't link
  -link)   link="$2" ; shift ; shift ;;  # link only one binary
esac

CC=gcc

# compile and link against course software and netpbm library
CFLAGS="-I. -I/usr/local/cii/include -I/usr/local/include -I/csc/411/include"
LIBS="-llocality -lcii -lnetpbm -lm -larith411 -lbitpack -lum-dis"
LFLAGS="-L/usr/local/cii/lib -L/usr/local/lib -L/csc/411/lib"

# these flags max out warnings and debug info
FLAGS="-no-pie -g -O0 -Wall -Wextra -Werror -Wfatal-errors -std=c++14 -pedantic"

rm -f *.o  # make sure no object files are left hanging around

case $# in
  0) set *.cpp ;; # if no args are given, compile all .c files
esac

# compile each argument to a .o file
for cfile
do
  g++ $FLAGS $CFLAGS -c $cfile
done


case $link in 
    all| memory) gcc  $CFLAGS $LFLAGS $FLAGS -o memory memory.o\
                \
                $LIBS
                linked = no;;
esac

case $link in 
    all| reader) gcc  $CFLAGS $LFLAGS $FLAGS -o reader reader.o\
                \
                $LIBS
                linked = no;;
esac

case $link in 
    all| opcode) gcc  $CFLAGS $LFLAGS $FLAGS -o opcode opcode.o\
                \
                $LIBS
                linked = no;;
esac

case $link in 
    all|um) gcc  $CFLAGS $LFLAGS -o um um.o\
                reader.o opcode.o memory.o\
                $LIBS
                ;;
esac